react-native init RNVideoVoiceCall
cd RNVideoVoiceCall
npm install

Package:
https://reactnavigation.org/docs/intro/
https://github.com/voximplant/react-native-voximplant
https://github.com/joinspontaneous/react-native-loading-spinner-overlay

npm install --save react-navigation
npm install --save react-native-loading-spinner-overlay@latest
npm install react-native-voximplant@latest --save
react-native link

Usage Stack Navigator:
import { StackNavigator } from "react-navigation";

and

return (
          <View>
            <Boiler navigation={this.props.navigation} />
          </View>
);

and

const app = StackNavigator({
  Boiler: {
    screen: HomeScreen,
    navigationOptions: {
      title: "Boiler"
    }
  }
});

Usage spinner:
import Spinner from "react-native-loading-spinner-overlay";

    this.state = {
      loading: false
    };

<Spinner visible={this.state.loading} />

when need to show spinner: this.setState({ loading: true });
when need to hide spinner: this.setState({ loading: false });

Usage voximplant:

react-native link react-native-voximplant

In android/src/main/AndroidManifest.xml add user permissions:

    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.RECORD_AUDIO" />
    <uses-permission android:name="android.permission.INTERNET" />

Login only:
DeviceEventEmitter.addListener("ConnectionSuccessful", () => {
  console.log("Connection successful");
});

DeviceEventEmitter.addListener("LoginSuccessful", () => {
  console.log("Login successful ");
});

DeviceEventEmitter.addListener("LoginFailed", () => {
  console.log("Login failed");
});

  componentDidMount() {
    VoxImplant.SDK.connect();
  }

    const accnameValue = "testing";
    const appnameValue = "testing";
    const usernameValue = email.replace(/@[^@]+$/, ""); //extract username from email
    console.log(usernameValue);
    const passwordValue = password;

    VoxImplant.SDK.login(
      usernameValue +
        "@" +
        appnameValue +
        "." +
        accnameValue +
        ".voximplant.com",
      passwordValue
    );


Register only:
DeviceEventEmitter.addListener("ConnectionSuccessful", () => {
  console.log("Connection successful");
});

DeviceEventEmitter.addListener("LoginSuccessful", () => {
  console.log("Login successful ");
});

DeviceEventEmitter.addListener("LoginFailed", () => {
  console.log("Login failed");
});

  componentDidMount() {
    VoxImplant.SDK.connect();
  }

    const Vemail = "testing@testing.com";
    const Vpassword = "testing123";

    //fetch response from voximplantto get API key and Account ID
    const responseM = await fetch(
      "https://api.voximplant.com/platform_api/Logon/?account_email=" +
        Vemail +
        "&account_password=" +
        Vpassword
    );
    //for assign user to ALL application
    const usernameValue = email.replace(/@[^@]+$/, "");
    const response = await fetch(
      "https://api.voximplant.com/platform_api/AddUser/?account_id=" +
        account_id +
        "&api_key=" +
        api_key +
        "&user_name=" +
        usernameValue +
        "&user_display_name=" +
        name +
        "&user_password=" +
        password
    );
    const json = await response.json();
    const user_id = JSON.stringify(json.user_id);
    await AsyncStorage.setItem("user_id", user_id);

    const responseB = await fetch(
      "https://api.voximplant.com/platform_api/BindUser/?account_id=" +
        account_id +
        "&api_key=" +
        api_key +
        "&user_id=" +
        user_id +
        "&application_id=all"
    );
    const jsonB = await responseB.json();
    const result = JSON.stringify(jsonB.result);
    console.log(result);
    
    const accnameValue = "testing";
    const appnameValue = "testing";
    const passwordValue = password;

    //login the user to get deviceeventemitter
    VoxImplant.SDK.login(
      usernameValue +
        "@" +
        appnameValue +
        "." +
        accnameValue +
        ".voximplant.com",
      passwordValue
    );

    AutoLogin:

DeviceEventEmitter.addListener("ConnectionSuccessful", () => {
  console.log("Connection successful");
  _this.setState({ page: "login" });
});

DeviceEventEmitter.addListener("LoginSuccessful", () => {
  console.log("Login successful ");
});

DeviceEventEmitter.addListener("LoginFailed", () => {
  console.log("Login failed");
});

    _this = this;
    AsyncStorage.getItem("email").then(item => {
      if (item) {
        this.setState({ emailA: true });
      }
    });
    VoxImplant.SDK.connect();

    const accnameValue = "testing";
    const appnameValue = "testing";
    const email = await AsyncStorage.getItem("email");
    const usernameValue = email.replace(/@[^@]+$/, "");
    const passwordValue = await AsyncStorage.getItem("password");
    console.log(email);
    console.log(passwordValue);
    VoxImplant.SDK.login(
      usernameValue +
        "@" +
        appnameValue +
        "." +
        accnameValue +
        ".voximplant.com",
      passwordValue
    );

     if (!this.state.emailA) {
      return (
        <View style={styles.container}>
          <StatusBar barStyle="light-content" backgroundColor="#16a085" />
          <Login navigation={this.props.navigation} />
        </View>
      );
    }
    if (this.state.page == "login") {
      this.VoxImplant();
    }
    return (
      <View style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#16a085" />
        <Boiler navigation={this.props.navigation} />
      </View>
    );